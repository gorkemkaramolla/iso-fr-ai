FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# Set the working directory in the container
WORKDIR /app

# Set environment variables to ensure non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Berlin

# Install system dependencies and Python 3.12
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install CUDA libraries
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libcublas-11-0 libcusparse-11-0 libcudnn8=8.0.5.39-1+cuda11.1 libcublas-dev-11-0 libcusparse-dev-11-0 libcudnn8-dev=8.0.5.39-1+cuda11.1 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN mkdir -p /app/services/large-v3 && \
    wget -O model.bin  /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/model.bin?download=true" && \
    wget -O .gitattributes /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/.gitattributes?download=true" && \
    wget -O README.md /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/README.md?download=true" && \
    wget -O config.json /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/config.json?download=true" && \
    wget -O preprocessor_config.json /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/preprocessor_config.json?download=true" && \
    wget -O tokenizer.json /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/tokenizer.json?download=true" && \
    wget -O vocabulary.json /app/services/large-v3 "https://huggingface.co/Systran/faster-whisper-large-v3/resolve/main/vocabulary.json?download=true" && \
    chmod -R 777 /app/services/large-v3 && \
    echo "Listing contents of the model directory:" && \
    ls -la /app/services/large-v3

# Create and activate the virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3.12 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install pip in the virtual environment
RUN $VIRTUAL_ENV/bin/python -m ensurepip --upgrade
RUN pip install --upgrade pip certifi six setuptools

# Install Python dependencies from the requirements.txt file in the virtual environment
COPY requirements.txt /app/requirements.txt
RUN pip install -r /app/requirements.txt

# Install transformers with the --use-feature=truststore option in the virtual environment
RUN pip install transformers --use-feature=truststore

# Copy the application code to the container
COPY . /app

# Inform Docker that the container listens on the specified port at runtime
EXPOSE 5003

# Run app.py using the virtual environment's Python interpreter when the container launches
CMD ["python", "app.py"]


# # # Use an official NVIDIA CUDA runtime as a parent image
# # # FROM pytorch/pytorch:2.3.0-cuda12.1-cudnn8-runtime
# # # FROM pytorch/pytorch:2.3.0-cuda11.8-cudnn8-runtime
# # FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# # # Set the working directory in the container
# # WORKDIR /app

# # ENV DEBIAN_FRONTEND=noninteractive
# # ENV TZ=Europe/Berlin

# # # Install system dependencies in one layer and clean up afterwards to reduce layer size
# # RUN apt-get update && \
# #     apt-get install -y --no-install-recommends \
# #     ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
# #     add-apt-repository ppa:deadsnakes/ppa && \
# #     apt-get update && \
# #     apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
# #     apt-get clean && \
# #     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# # # Install pip for Python 3.12
# # RUN wget https://bootstrap.pypa.io/get-pip.py && \
# #     python3.12 get-pip.py && \
# #     rm get-pip.py

# # # Update alternatives to set python3.12 as default
# # RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
# #     update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.12 1

# # # Install certifi and other required packages
# # RUN python3.12 -m pip install --upgrade pip certifi six setuptools

# # # Copy the current directory contents into the container at /app
# # COPY . /app

# # # Ensure CUDA libraries are installed
# # RUN apt-get update && \
# #     apt-get install -y --no-install-recommends \
# #     libcublas-11-0 libcusparse-11-0 libcudnn8=8.0.5.39-1+cuda11.1 libcublas-dev-11-0 libcusparse-dev-11-0 libcudnn8-dev=8.0.5.39-1+cuda11.1 && \
# #     apt-get clean && \
# #     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# # # Update pip and install Python dependencies from the requirements.txt file
# # RUN python3.12 -m pip install --upgrade pip && \
# #     python3.12 -m pip install --no-cache-dir -r requirements.txt

# # # Install transformers with the --use-feature=truststore option
# # RUN python3.12 -m pip install transformers --use-feature=truststore

# # # Inform Docker that the container listens on the specified port at runtime
# # EXPOSE 5003

# # # Run app.py when the container launches
# # CMD ["python3", "app.py"]

# # Use an official NVIDIA CUDA runtime as a parent image
# FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# # Set the working directory in the container
# WORKDIR /app

# ENV DEBIAN_FRONTEND=noninteractive
# ENV TZ=Europe/Berlin

# # Install system dependencies in one layer and clean up afterwards to reduce layer size
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
#     add-apt-repository ppa:deadsnakes/ppa && \
#     apt-get update && \
#     apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# # Create a virtual environment with Python 3.12
# RUN python3.12 -m venv /app/venv

# # Install pip for Python 3.12 in the virtual environment
# RUN /app/venv/bin/python -m ensurepip --upgrade
# RUN /app/venv/bin/python -m pip install --upgrade pip certifi six setuptools

# # Copy the current directory contents into the container at /app

# # Ensure CUDA libraries are installed
# # RUN apt-get update && \
# #     apt-get install -y --no-install-recommends \
# #     libcublas-11-0 libcusparse-11-0 libcudnn8=8.0.5.39-1+cuda11.1 libcublas-dev-11-0 libcusparse-dev-11-0 libcudnn8-dev=8.0.5.39-1+cuda11.1 && \
# #     apt-get clean && \
# #     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# # Install Python dependencies from the requirements.txt file in the virtual environment
# RUN /app/venv/bin/pip install -r requirements.txt

# # Install transformers with the --use-feature=truststore option in the virtual environment
# RUN /app/venv/bin/pip install transformers --use-feature=truststore
# COPY . /app
# # Inform Docker that the container listens on the specified port at runtime
# EXPOSE 5003

# # Run app.py using the virtual environment's Python interpreter when the container launches
# CMD ["/app/venv/bin/python", "app.py"]
# Use an official NVIDIA CUDA runtime as a parent image
# FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# # Set the working directory in the container
# WORKDIR /app

# # Set environment variables to ensure non-interactive installation
# ENV DEBIAN_FRONTEND=noninteractive
# ENV TZ=Europe/Berlin

# # Install system dependencies and Python 3.12
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
#     add-apt-repository ppa:deadsnakes/ppa && \
#     apt-get update && \
#     apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     libcublas-11-0 libcusparse-11-0 libcudnn8=8.0.5.39-1+cuda11.1 libcublas-dev-11-0 libcusparse-dev-11-0 libcudnn8-dev=8.0.5.39-1+cuda11.1 && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
# # Copy the current directory contents into the container at /app
# COPY . /app

# # Create a virtual environment with Python 3.12
# RUN python3.12 -m venv /app/venv

# # Activate the virtual environment and install pip
# RUN /app/venv/bin/python -m ensurepip --upgrade
# RUN /app/venv/bin/python -m pip install --upgrade pip certifi six setuptools

# # Install Python dependencies from the requirements.txt file in the virtual environment
# RUN /app/venv/bin/pip install --no-cache-dir -r /app/requirements.txt

# # Install transformers with the --use-feature=truststore option in the virtual environment
# RUN /app/venv/bin/pip install transformers --use-feature=truststore

# # Inform Docker that the container listens on the specified port at runtime
# EXPOSE 5003

# # Run app.py using the virtual environment's Python interpreter when the container launches
# CMD ["/app/venv/bin/python", "app.py"]
