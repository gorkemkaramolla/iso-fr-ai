FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# Set the working directory inside the container
WORKDIR /app

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Berlin

# Install required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create and activate the virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3.12 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install pip and required Python packages
RUN $VIRTUAL_ENV/bin/python -m ensurepip --upgrade
RUN pip install --upgrade pip certifi six setuptools

# Install Python dependencies from the requirements.txt file
COPY requirements.txt .
RUN pip install -r requirements.txt

# Copy the rest of the application code
COPY . /app

# Inform Docker that the container listens on the specified port at runtime
EXPOSE 5002

# Command to run the application
CMD ["python", "app.py"]

# FROM nvidia/cuda:11.8.0-runtime-ubuntu20.04

# # Set the working directory inside the container
# WORKDIR /app
# ENV DEBIAN_FRONTEND=noninteractive
# ENV TZ=Europe/Berlin

# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     ffmpeg libsm6 libxext6 build-essential gcc libssl-dev libffi-dev unzip wget libgomp1 software-properties-common && \
#     add-apt-repository ppa:deadsnakes/ppa && \
#     apt-get update && \
#     apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-distutils && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
# COPY . /app
# # Install pip for Python 3.12
# # RUN wget https://bootstrap.pypa.io/get-pip.py && \
# #     python3.12 get-pip.py && \
# #     rm get-pip.py

# # Update alternatives to set python3.12 as default
# # RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
# #     update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.12 1
# # Install certifi and other required packages
# # Create a virtual environment with Python 3.12
# RUN python3.12 -m venv /app/venv
# RUN /app/venv/bin/python -m ensurepip --upgrade
# # Install pip for Python 3.12 in the virtual environment
# RUN /app/venv/bin/python -m pip install --upgrade pip certifi six setuptools



# # Prepare the models directory within the /app directory and download model files
# # RUN mkdir -p /app/services/models/buffalo_l && \
# #     wget -O /app/services/models/buffalo_l/buffalo_l.zip "https://github.com/deepinsight/insightface/releases/download/v0.7/buffalo_l.zip" && \
# #     unzip /app/services/models/buffalo_l/buffalo_l.zip -d /app/services/models/buffalo_l && \
# #     rm /app/services/models/buffalo_l/buffalo_l.zip && \
# #     wget -O /app/services/models/buffalo_l/emotion_model.onnx "https://github.com/shangeth/Facial-Emotion-Recognition-PyTorch-ONNX/raw/master/ONNX/models/onnx_model.onnx" && \
# #     echo "Listing contents of the model directory:" && \
# #     ls -la /app/services/models/buffalo_l

# # Ensure CUDA libraries are installed
# # RUN apt-get update && \
# #     apt-get install -y --no-install-recommends \
# #     libcublas-11-0 libcusparse-11-0 libcudnn8=8.0.5.39-1+cuda11.1 libcublas-dev-11-0 libcusparse-dev-11-0 libcudnn8-dev=8.0.5.39-1+cuda11.1 && \
# #     apt-get clean && \
# #     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    
# # Copy the local directory contents to the container's working directory


# # Install Python dependencies from the requirements.txt file in the virtual environment
# RUN /app/venv/bin/pip install -r requirements.txt
# COPY . /app

# # Inform Docker that the container listens on the specified port at runtime
# EXPOSE 5002

# # Command to run the application
# CMD ["/app/venv/bin/python", "app.py"]
